(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{385:function(e,t,v){"use strict";v.r(t);var _=v(26),s=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h3",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" "),v("strong",[e._v("前言")])]),e._v(" "),v("p",[e._v("我们将在接下来的几篇文章中解析"),v("code",[e._v("Vue3-runtime")]),e._v("包所涉及的相关功能，\n比如"),v("code",[e._v("renderer")]),e._v("渲染器的创建、"),v("code",[e._v("custom render API")]),e._v(" 是如何设计的、组件的挂载和更新流程、\n"),v("code",[e._v("diff")]),e._v("算法解析等等一系列运行时相关的功能，能帮助你更加了解"),v("code",[e._v("Vue3")]),e._v("的运行机制。")]),e._v(" "),v("h2",{attrs:{id:"浅谈组件化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浅谈组件化"}},[e._v("#")]),e._v(" 浅谈组件化")]),e._v(" "),v("p",[e._v("组件系统是"),v("code",[e._v("Vue")]),e._v("的一个重要概念，它是一种抽象的表达视图的方式；它允许我们使用小型、独立的可复用组件来构建大型应用。\n而组件化是指解耦复杂系统时将多个功能模块拆分、重组的过程；从中可以提炼出来组件化，最重要的是拆分和重组，这是典型的分治思想；\n换句话说就是将页面上的各个部分拆分成可复用独立的最小单元然后重组成页面，我们通过一张图来感受：")]),e._v(" "),v("p",[v("img",{attrs:{src:"/vue3-analysis/runtime/components.png",alt:"components"}})]),e._v(" "),v("p",[e._v("当一个复杂视图被拆分成一个个组件单元又重组成组件树来描述时，我们会发现相同能力和表述的单元我们可以使用同一个组件来表达，\n这就是组件化最重要的意义。")]),e._v(" "),v("h2",{attrs:{id:"目标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[e._v("#")]),e._v(" 目标")]),e._v(" "),v("p",[e._v("本篇章主要以解析 vue 的组件系统、运行时调度和"),v("code",[e._v("VNode")]),e._v("等等为目的，会适当舍弃一些细枝末节的部分比如：\n如何对"),v("code",[e._v("web")]),e._v("平台元素"),v("code",[e._v("class")]),e._v("、"),v("code",[e._v("style")]),e._v("属性的 patch 等更加细节的内容；\n考虑到"),v("code",[e._v("vue3")]),e._v("代码容量，顾忌每一个代码分支是会拖缓达到目标的进度的，\n所以以主要目标为重，原生组件的实现、插槽等等特性可在之后的篇章再详细解读。")])])}),[],!1,null,null,null);t.default=s.exports}}]);